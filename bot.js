const { Client, GatewayIntentBits, SlashCommandBuilder, REST, Routes, Events, EmbedBuilder, PermissionsBitField, ButtonStyle, ButtonBuilder, ButtonInteraction, ActionRowBuilder } = require('discord.js');
require('dotenv').config();
const os = require('os');
const apiKeys = process.env.OWM_API_KEYS?.split(",").map(k => k.trim()).filter(Boolean) || [];

// functions.js
// const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

const {
    getAirPollutionData, getElevation, fetchWeatherDataByCoords, getWeatherIconByCoords,
    getWeatherIcon, fetchWeatherData, getIPInfo, getFloodRisk, getSatelliteRadiation,
    fetchForecastByCoords, fetchForecast
} = require('./BotCommands/bot/functions.js');
require('./keepalive.js');
require('./voting.js');
const { setGuildPrefix } = require('./db.js');
const OWNER_SERVERS = process.env.OWNER_SERVERS.split(",").map(id => id.trim());

var prefix = "w!" || "W!";

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

const TOKEN = process.env.TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const OWM_API_KEY = process.env.OWM_API_KEY;

const commands = [
    new SlashCommandBuilder().setName('weather').setDescription('Xem th·ªùi ti·∫øt hi·ªán t·∫°i b·∫±ng t√™n th√†nh ph·ªë').addStringOption(opt => opt.setName('location').setDescription('T√™n th√†nh ph·ªë').setRequired(true)),
    new SlashCommandBuilder().setName('weather_coord').setDescription('Xem th·ªùi ti·∫øt hi·ªán t·∫°i theo t·ªça ƒë·ªô').addNumberOption(opt => opt.setName('latitude').setDescription('Vƒ© ƒë·ªô').setRequired(true)).addNumberOption(opt => opt.setName('longitude').setDescription('Kinh ƒë·ªô').setRequired(true)),
    new SlashCommandBuilder().setName('forecast').setDescription('Xem d·ª± b√°o th·ªùi ti·∫øt').addStringOption(opt => opt.setName('location').setDescription('T√™n th√†nh ph·ªë').setRequired(true)).addIntegerOption(opt => opt.setName('hours').setDescription('S·ªë gi·ªù mu·ªën xem d·ª± b√°o (m·∫∑c ƒë·ªãnh: 3 gi·ªù)').addChoices({ name: '3 gi·ªù', value: 3 }, { name: '5 gi·ªù', value: 5 }, { name: '12 gi·ªù', value: 12 }, { name: '24 gi·ªù', value: 24 })),
    new SlashCommandBuilder().setName('forecast_coord').setDescription('Xem d·ª± b√°o th·ªùi ti·∫øt theo t·ªça ƒë·ªô').addNumberOption(opt => opt.setName('latitude').setDescription('Vƒ© ƒë·ªô').setRequired(true)).addNumberOption(opt => opt.setName('longitude').setDescription('Kinh ƒë·ªô').setRequired(true)).addIntegerOption(opt => opt.setName('hours').setDescription('S·ªë gi·ªù mu·ªën xem d·ª± b√°o (m·∫∑c ƒë·ªãnh: 3 gi·ªù)').addChoices({ name: '3 gi·ªù', value: 3 }, { name: '6 gi·ªù', value: 6 }, { name: '12 gi·ªù', value: 12 }, { name: '24 gi·ªù', value: 24 })),
    new SlashCommandBuilder().setName('help').setDescription('Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p').addBooleanOption(opt => opt.setName('show').setDescription('Hi·ªÉn th·ªã c√¥ng khai trong k√™nh hay ·∫©n danh (m·∫∑c ƒë·ªãnh: c√¥ng khai)').setRequired(false)),
    new SlashCommandBuilder().setName('air_pollution').setDescription('Xem th√¥ng tin √¥ nhi·ªÖm kh√¥ng kh√≠').addNumberOption(opt => opt.setName('latitude').setDescription('Vƒ© ƒë·ªô').setRequired(true)).addNumberOption(opt => opt.setName('longitude').setDescription('Kinh ƒë·ªô').setRequired(true)),
    new SlashCommandBuilder().setName("geo").setDescription("Chuy·ªÉn ƒë·ªïi gi·ªØa ƒë·ªãa ƒëi·ªÉm v√† t·ªça ƒë·ªô")
        .addSubcommand(sub => sub.setName("location_to_coords").setDescription("Chuy·ªÉn t·ª´ ƒë·ªãa ƒëi·ªÉm sang t·ªça ƒë·ªô").addStringOption(option => option.setName("location").setDescription("Nh·∫≠p t√™n ƒë·ªãa ƒëi·ªÉm").setRequired(true)))
        .addSubcommand(sub => sub.setName("coords_to_location").setDescription("Chuy·ªÉn t·ª´ t·ªça ƒë·ªô sang ƒë·ªãa ƒëi·ªÉm").addNumberOption(option => option.setName("lat").setDescription("Nh·∫≠p vƒ© ƒë·ªô").setRequired(true)).addNumberOption(option => option.setName("lon").setDescription("Nh·∫≠p kinh ƒë·ªô").setRequired(true))),
    new SlashCommandBuilder().setName('donate').setDescription('·ª¶ng h·ªô ƒë·ªÉ ph√°t tri·ªÉn bot'),
    new SlashCommandBuilder().setName('weather_icon').setDescription('Xem bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt theo ƒë·ªãa ƒëi·ªÉm (·ªü th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)').addStringOption(option => option.setName('location').setDescription('T√™n ƒë·ªãa ƒëi·ªÉm').setRequired(true)),
    new SlashCommandBuilder().setName('weather_icon_coord').setDescription('Xem bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt theo t·ªça ƒë·ªô (·ªü th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)').addNumberOption(option => option.setName('latitude').setDescription('Vƒ© ƒë·ªô').setRequired(true)).addNumberOption(option => option.setName('longitude').setDescription('Kinh ƒë·ªô').setRequired(true)),
    new SlashCommandBuilder().setName('satellite_radiation').setDescription('Xem d·ªØ li·ªáu b·ª©c x·∫° v·ªá tinh (satellite radiation)').addNumberOption(option => option.setName('latitude').setDescription('Vƒ© ƒë·ªô').setRequired(true)).addNumberOption(option => option.setName('longitude').setDescription('Kinh ƒë·ªô').setRequired(true)),
    new SlashCommandBuilder().setName('elevation').setDescription('Xem ƒë·ªô cao so v·ªõi m·ª±c n∆∞·ªõc bi·ªÉn').addNumberOption(option => option.setName('latitude').setDescription('Vƒ© ƒë·ªô').setRequired(true)).addNumberOption(option => option.setName('longitude').setDescription('Kinh ƒë·ªô').setRequired(true)),
    new SlashCommandBuilder().setName("flood").setDescription("Xem nguy c∆° ng·∫≠p l·ª•t (ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o m·ªói ng√†y)").addNumberOption(option => option.setName('latitude').setDescription('Vƒ© ƒë·ªô').setRequired(true)).addNumberOption(option => option.setName('longitude').setDescription('Kinh ƒë·ªô').setRequired(true)),
    new SlashCommandBuilder().setName("vote").setDescription("B·ªè phi·∫øu cho bot tr√™n top.gg").addBooleanOption(opt => opt.setName('show').setDescription('Hi·ªÉn th·ªã c√¥ng khai trong k√™nh hay ·∫©n danh (m·∫∑c ƒë·ªãnh: c√¥ng khai)').setRequired(false)),
    new SlashCommandBuilder()
        .setName("ping")
        .setDescription("Ki·ªÉm tra ƒë·ªô tr·ªÖ v√† t√¨nh tr·∫°ng bot.")
        .addBooleanOption(option => option.setName("show").setDescription("Hi·ªÉn th·ªã c√¥ng khai trong k√™nh hay ·∫©n danh (m·∫∑c ƒë·ªãnh: c√¥ng khai)").setRequired(false)),
].map(cmd => cmd.toJSON());

const rest = new REST({ version: '10' }).setToken(TOKEN);
(async () => {
    await rest.put(Routes.applicationCommands(CLIENT_ID), { body: commands });
    console.log("ƒê√£ ƒëƒÉng k√Ω slash command!");
})();

client.once('ready', () => {
    console.log(`Bot ƒë√£ ƒëƒÉng nh·∫≠p: ${client.user.tag}`);
    client.user.setPresence({
        activities: [{ name: 'ƒêang theo d√µi th·ªùi ti·∫øt üå¶', type: 3 }],
        status: 'dnd',
        afk: false
    });
});

// K√≠ch ho·∫°t khi c√≥ ng∆∞·ªùi ping bot @Th·ªùi ti·∫øt
client.on(Events.MessageCreate, async msg => {
    if (msg.author.bot) return;
    if (msg.mentions.has(client.user)) {
        // Check xem c√≥ nh·ªØng permissions c·∫ßn thi·∫øt kh√¥ng: SEND_MESSAGES, SEND_MESSAGES_IN_THREADS, EMBED_LINKS, USE_EXTERNAL_EMOJIS, USE_SLASH_COMMANDS, READ_MESSAGE_HISTORY
        const requiredPermissions = [
            PermissionsBitField.Flags.SendMessages,
            PermissionsBitField.Flags.SendMessagesInThreads,
            PermissionsBitField.Flags.EmbedLinks,
            PermissionsBitField.Flags.UseExternalEmojis,
            PermissionsBitField.Flags.UseApplicationCommands,
            PermissionsBitField.Flags.ReadMessageHistory
        ];
        const botMember = await msg.guild.members.fetchMe();
        if (!botMember.permissions.has(requiredPermissions)) {
            // N·∫øu kh√¥ng c√≥ quy·ªÅn, g·ª≠i DM cho ch·ªß server n·∫øu c√≥ th·ªÉ
            const owner = await msg.guild.fetchOwner();
            try {
                await owner.send(`‚ö†Ô∏è M√¨nh kh√¥ng c√≥ ƒë·ªß quy·ªÅn trong server **${msg.guild.name}** ƒë·ªÉ ho·∫°t ƒë·ªông ƒë√∫ng c√°ch.\nVui l√≤ng c·∫•p cho m√¨nh c√°c quy·ªÅn sau: ${requiredPermissions.map(perm => `\`${PermissionsBitField.Flags[perm]}\``).join(', ')}.`);
                console.log(`Thi·∫øu quy·ªÅn: ${requiredPermissions.map(perm => `\`${PermissionsBitField.Flags[perm]}\``).join(', ')}`);
            } catch (error) {
                console.error(`Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn cho ch·ªß server: ${error}`);
            }
        }
        msg.react('<:01d:1416316694514634782>').catch(console.error);
        return msg.reply(`üëã Ch√†o b·∫°n **${msg.author.username}**! S·ª≠ d·ª•ng l·ªánh \`/help\` ƒë·ªÉ xem danh s√°ch c√°c l·ªánh c·ªßa m√¨nh nh√©!`);
    }
});

client.on(Events.MessageCreate, async (msg) => {
    if (!msg.guild || msg.author.bot || !msg.content.startsWith(prefix)) return;
    const isOwnerServer = OWNER_SERVERS.includes(msg.guild.id);
    if (isOwnerServer) {
        // Further moderation logic can be added here
        const args = msg.content.slice(prefix.length).trim().split(/ +/);
        const cmd = args.shift().toLowerCase();

        if (cmd === "clear" || cmd === "delete" || cmd === "del") {
            if (!msg.member.permissions.has("ManageMessages"))
                return msg.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a tin nh·∫Øn!");
            const count = parseInt(args[0]);
            if (isNaN(count) || count < 1 || count > 1000)
                return msg.reply("‚ö†Ô∏è H√£y nh·∫≠p s·ªë l∆∞·ª£ng tin nh·∫Øn (1‚Äì1000).");
            try {
                await msg.channel.bulkDelete(count + 1, true);
                // x√≥a tin nh·∫Øn xong r·ªìi m·ªõi log channel
                const confirm = await msg.channel.send(`‚úÖ ƒê√£ x√≥a ${count} tin nh·∫Øn.`);
                setTimeout(() => confirm.delete().catch(() => { }), 5000);
            } catch (error) {
                console.error("L·ªói khi x√≥a tin nh·∫Øn:", error);
                return msg.reply("‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a tin nh·∫Øn.");
            }
        }

        if (cmd === "ban") {
            if (!msg.member.permissions.has("BanMembers"))
                return msg.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ban th√†nh vi√™n!");
            const member = msg.mentions.members.first();
            if (!member) return msg.reply("‚ö†Ô∏è H√£y mention ng∆∞·ªùi c·∫ßn ban.");
            await member.ban({ reason: "B·ªã ban b·ªüi bot." });
            return msg.reply(`üö´ **${member.user.tag}** ƒë√£ b·ªã ban.`);
        }

        if (cmd === "unban") {
            if (!msg.member.permissions.has("BanMembers")) {
                return msg.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn unban th√†nh vi√™n!");
            }
            const userId = args[0];
            if (!userId) return msg.reply("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng c·∫ßn unban!")
            try {
                await msg.guild.members.unban(userId);
                return msg.channel.send(`‚úÖ ƒê√£ g·ª° ban cho ng∆∞·ªùi d√πng **<@${userId}>**`);
            } catch (err) {
                console.error("L·ªói khi g·ª° ban ng∆∞·ªùi d√πng:", err);
                return msg.reply("‚ùå C√≥ l·ªói x·∫£y ra khi g·ª° ban ng∆∞·ªùi d√πng.");
            }
        }

        if (cmd === "kick") {
            if (!msg.member.permissions.has("KickMembers"))
                return msg.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn kick th√†nh vi√™n!");
            const member = msg.mentions.members.first();
            if (!member) return msg.reply("‚ö†Ô∏è H√£y mention ng∆∞·ªùi c·∫ßn kick.");
            await member.kick({ reason: "B·ªã kick b·ªüi bot." });
            return msg.reply(`üë¢ **${member.user.tag}** ƒë√£ b·ªã kick.`);
        }
        // Mute command with duration can be added here
        if (cmd === "mute") {
            if (!msg.member.permissions.has("MuteMembers"))
                return msg.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn mute th√†nh vi√™n!");
            const member = msg.mentions.members.first();
            if (!member) return msg.reply("‚ö†Ô∏è H√£y mention ng∆∞·ªùi c·∫ßn mute.");
            const duration = parseInt(args[1]) || 10;
            await member.timeout(duration * 1000, "B·ªã mute b·ªüi bot.");
            return msg.reply(`üîá **${member.user.tag}** ƒë√£ b·ªã mute trong ${duration} gi√¢y.`);
        }
        if (cmd === "unmute") {
            if (!msg.member.permissions.has("MuteMembers"))
                return msg.reply("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn unmute th√†nh vi√™n!");
            const member = msg.mentions.members.first() || msg.guild.members.cache.get(args[0]);
            if (!member) return msg.reply("‚ö†Ô∏è Vui l√≤ng mention ho·∫∑c nh·∫≠p ID th√†nh vi√™n c·∫ßn unmute!");
            try {
                await member.timeout(null, "ƒê∆∞·ª£c unmute b·ªüi bot.");
                return msg.channel.send(`üîä **${member.user.tag}** ƒë√£ ƒë∆∞·ª£c unmute.`);
            } catch (err) {
                console.error(err);
                return msg.reply("‚ùå C√≥ l·ªói x·∫£y ra khi unmute th√†nh vi√™n.");
            }
        } else {
            // Ignore messages from non-owner servers
            return;
        }
    }
});

client.on(Events.GuildCreate, async guild => {
    // Khi bot ƒë∆∞·ª£c th√™m v√†o server m·ªõi, g·ª≠i DM cho owner
    try {
        const owner = await guild.fetchOwner();
        const guildCreate_embed = new EmbedBuilder()
            .setColor(0x00AE86)
            .setTitle(`üëã C·∫£m ∆°n b·∫°n ƒë√£ th√™m ${client.user.username} v√†o server c·ªßa b·∫°n!`)
            .setDescription(`S·ª≠ d·ª•ng l·ªánh \`/help\` ƒë·ªÉ xem danh s√°ch c√°c l·ªánh c·ªßa m√¨nh nh√©!
N·∫øu b·∫°n th√≠ch bot, b·∫°n c√≥ th·ªÉ ·ªßng h·ªô m√¨nh qua Patreon ho·∫∑c BuyMeACoffee ƒë·ªÉ gi√∫p bot ph√°t tri·ªÉn h∆°n n·ªØa!`)
            .setFooter({ text: 'Dev by <@1372581695328620594> (@therealnhan)' })
            .setTimestamp()
        await owner.send({ embeds: [guildCreate_embed] });
        const voteButton = new ButtonBuilder()
            .setLabel('Vote tr√™n top.gg')
            .setStyle(ButtonStyle.Link)
            .setURL('https://top.gg/bot/1403622819648110664/vote')
            .setEmoji('‚≠ê');
        const donate_btn = new ButtonBuilder()
            .setLabel('·ª¶ng h·ªô qua Patreon')
            .setStyle(ButtonStyle.Link)
            .setURL('https://www.patreon.com/randomperson255')
            .setEmoji('üíñ');
        const buymeacoffee_btn = new ButtonBuilder()
            .setLabel('M·ªùi m√¨nh m·ªôt ly c√† ph√™')
            .setStyle(ButtonStyle.Link)
            .setURL('https://www.buymeacoffee.com/random.person.255')
            .setEmoji('‚òï');
        const row = new ActionRowBuilder()
            .addComponents(voteButton, donate_btn, buymeacoffee_btn);
        // n·∫øu ƒë·ª£i l√¢u qu√° th√¨ disable n√∫t
        setTimeout(async () => {
            const disabledRow = new ActionRowBuilder()
                .addComponents(voteButton.setDisabled(true), donate_btn.setDisabled(true), buymeacoffee_btn.setDisabled(true));
            owner.edit({ embeds: [guildCreate_embed], components: [disabledRow] });
        }, 60000); // 1 ph√∫t
        owner.send({ embeds: [guildCreate_embed], components: [row] });
    } catch (error) {
        console.error(`Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn cho ch·ªß server: ${error}`);
    }
});

client.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isCommand()) return;
    const { commandName, options } = interaction;

    try {
        if (commandName !== 'help' && commandName !== 'vote' && commandName !== 'ping' && !interaction.deferred && !interaction.replied) {
            await interaction.deferReply({ flags: 64 });
        }

        if (commandName === "ping") {
            const show = options.getBoolean('show') ?? true;
            if (show === false) {
                await interaction.deferReply({ ephemeral: true });
            } else {
                await interaction.deferReply();
            }
            try {
                const sent = await interaction.editReply({ content: "üèì Pong!", fetchReply: true });

                const ping = sent.createdTimestamp - interaction.createdTimestamp;
                const apiPing = Math.round(interaction.client.ws.ping);

                const uptimeSeconds = Math.floor(process.uptime());
                const uptimeMinutes = Math.floor(uptimeSeconds / 60);
                const uptimeHours = Math.floor(uptimeMinutes / 60);

                const memUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
                const cpuLoad = os.loadavg()[0].toFixed(2);

                await interaction.followUp({
                    embeds: [
                        {
                            title: "üìä Bot Statistics",
                            color: 0x00ff99,
                            fields: [
                                { name: "üèì Ping", value: `${ping}ms (API: ${apiPing}ms)`, inline: true },
                                { name: "üïí Uptime", value: `${uptimeHours}h ${uptimeMinutes % 60}m`, inline: true },
                                { name: "üíæ RAM", value: `${memUsage} MB`, inline: true },
                                { name: "‚öôÔ∏è CPU Load", value: `${cpuLoad}`, inline: true },
                            ],
                            footer: { text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}` },
                            timestamp: new Date(),
                        },
                    ],
                ephemeral: !show });
                return;
            } catch (err) {
                console.error(err);
                return interaction.editReply({ content: "‚ùå L·ªói khi ch·∫°y l·ªánh /ping!", ephemeral: true });
            }
        }

        if (commandName === 'vote') {
            const show = options.getBoolean('show') ?? true;
            if (show === false) {
                await interaction.deferReply({ ephemeral: true });
            } else {
                await interaction.deferReply();
            }
            // await interaction.deferReply();
            // Th√™m link bot tr√™n top.gg v√† n√∫t nh·∫•n ƒë·ªÉ vote
            const voteEmbed = new EmbedBuilder()
                .setColor(0x00AE86)
                .setTitle('üåü Vote cho Th·ªùi ti·∫øt#6014 tr√™n top.gg!')
                .setDescription('N·∫øu b·∫°n th√≠ch bot, h√£y d√†nh m·ªôt ch√∫t th·ªùi gian ƒë·ªÉ vote cho bot tr√™n top.gg. ƒêi·ªÅu n√†y gi√∫p bot ph√°t tri·ªÉn v√† ti·∫øp c·∫≠n nhi·ªÅu ng∆∞·ªùi h∆°n!')
                // .setURL('https://top.gg/bot/1403622819648110664/vote')
                .setFooter({ text: 'C·∫£m ∆°n b·∫°n ƒë√£ ·ªßng h·ªô!\nDev by <@1372581695328620594> (@therealnhan)' });
            const voteButton = new ButtonBuilder()
                .setLabel('Vote tr√™n top.gg')
                .setStyle(ButtonStyle.Link)
                .setURL('https://top.gg/bot/1403622819648110664/vote')
                .setEmoji('‚≠ê');
            const donate_btn = new ButtonBuilder()
                .setLabel('·ª¶ng h·ªô qua Patreon')
                .setStyle(ButtonStyle.Link)
                .setURL('https://www.patreon.com/randomperson255')
                .setEmoji('üíñ');
            const buymeacoffee_btn = new ButtonBuilder()
                .setLabel('M·ªùi m√¨nh m·ªôt ly c√† ph√™')
                .setStyle(ButtonStyle.Link)
                .setURL('https://www.buymeacoffee.com/random.person.255')
                .setEmoji('‚òï');
            const row = new ActionRowBuilder()
                .addComponents(voteButton, donate_btn, buymeacoffee_btn);
            await interaction.editReply({ embeds: [voteEmbed], components: [row] });
            // n·∫øu ƒë·ª£i l√¢u qu√° th√¨ disable n√∫t
            setTimeout(async () => {
                const disabledRow = new ActionRowBuilder()
                    .addComponents(voteButton.setDisabled(true), donate_btn.setDisabled(true), buymeacoffee_btn.setDisabled(true));
                await interaction.editReply({ components: [disabledRow] });
            }, 60000); // 1 ph√∫t
            return;
        }

        if (commandName === 'help') {
            const show = options.getBoolean('show') ?? true;
            if (show === false) {
                await interaction.deferReply({ ephemeral: true });
            } else {
                await interaction.deferReply();
            }
            return await interaction.editReply({
                embeds: [
                    new EmbedBuilder()
                        .setTitle('Tr·ª£ gi√∫p')
                        .setDescription('Danh s√°ch c√°c l·ªánh:')
                        .addFields(
                            { name: '/weather', value: 'Xem th·ªùi ti·∫øt hi·ªán t·∫°i', inline: true },
                            { name: '/weather_coord', value: 'Xem th·ªùi ti·∫øt hi·ªán t·∫°i theo t·ªça ƒë·ªô', inline: true },
                            { name: '/forecast', value: 'Xem d·ª± b√°o th·ªùi ti·∫øt', inline: true },
                            { name: '/forecast_coord', value: 'Xem d·ª± b√°o th·ªùi ti·∫øt theo t·ªça ƒë·ªô', inline: true },
                            { name: '/weather_icon', value: 'Xem bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt theo ƒë·ªãa ƒëi·ªÉm (·ªü th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)', inline: true },
                            { name: '/satellite_radiation', value: 'Xem d·ªØ li·ªáu b·ª©c x·∫° v·ªá tinh (satellite radiation)', inline: true },
                            { name: '/weather_icon_coord', value: 'Xem bi·ªÉu t∆∞·ª£ng th·ªùi ti·∫øt theo t·ªça ƒë·ªô (·ªü th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)', inline: true },
                            { name: '/air_pollution', value: 'Xem th√¥ng tin √¥ nhi·ªÖm kh√¥ng kh√≠', inline: true },
                            { name: '/geo coords_to_location', value: 'Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô th√†nh ƒë·ªãa ƒëi·ªÉm', inline: true },
                            { name: '/geo location_to_coords', value: 'Chuy·ªÉn ƒë·ªïi ƒë·ªãa ƒëi·ªÉm th√†nh t·ªça ƒë·ªô', inline: true },
                            { name: '/help', value: 'Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p', inline: true },
                            { name: '/donate', value: '·ª¶ng h·ªô bot n·∫øu b·∫°n th·∫•y h·ªØu √≠ch', inline: true },
                            { name: '/elevation', value: 'Xem ƒë·ªô cao so v·ªõi m·ª±c n∆∞·ªõc bi·ªÉn', inline: true },
                            { name: '/flood', value: 'Xem nguy c∆° ng·∫≠p l·ª•t', inline: true },
                            { name: '/vote', value: 'B·ªè phi·∫øu cho bot tr√™n top.gg', inline: true },
                            { name: '/ping', value: 'Ki·ªÉm tra ƒë·ªô tr·ªÖ v√† t√¨nh tr·∫°ng bot', inline: true },
                        )
                ]
            });
        }

        if (commandName === 'weather') {
            const location = options.getString('location').trim();
            const result = await fetchWeatherData(location);
            return await interaction.editReply(result.error ? result.content : { embeds: [result.embed] });
        }

        if (commandName === 'weather_coord') {
            const lat = options.getNumber('latitude');
            const lon = options.getNumber('longitude');
            const result = await fetchWeatherDataByCoords(lat, lon);
            return await interaction.editReply(result.error ? result.content : { embeds: [result.embed] });
        }

        if (commandName === 'forecast') {
            const location = options.getString('location').trim();
            let hours = options.getInteger('hours') ?? 3;
            if (hours <= 0 || hours > 120) return await interaction.editReply('‚ö† Vui l√≤ng ch·ªçn s·ªë gi·ªù t·ª´ 1 ƒë·∫øn 120.');
            const result = await fetchForecast(location, hours);
            return await interaction.editReply(result.error ? result.content : { embeds: [result.embed] });
        }

        if (commandName === 'forecast_coord') {
            const lat = options.getNumber('latitude');
            const lon = options.getNumber('longitude');
            let hours = options.getInteger('hours') ?? 3;
            if (hours <= 0 || hours > 120) return await interaction.editReply('‚ö† Vui l√≤ng ch·ªçn s·ªë gi·ªù t·ª´ 1 ƒë·∫øn 120.');
            const result = await fetchForecastByCoords(lat, lon, hours);
            return await interaction.editReply(result.error ? result.content : { embeds: [result.embed] });
        }

        if (commandName === 'weather_icon') {
            const location = options.getString('location').trim();
            const iconResult = await getWeatherIcon(location);
            return await interaction.editReply(iconResult.error ? iconResult.content : { files: [iconResult.iconUrl] });
        }

        if (commandName === 'weather_icon_coord') {
            const lat = options.getNumber('latitude');
            const lon = options.getNumber('longitude');
            const iconResult = await getWeatherIconByCoords(lat, lon);
            return await interaction.editReply(iconResult.error ? iconResult.content : { files: [iconResult.iconUrl] });
        }

        if (commandName === 'satellite_radiation') {
            const lat = options.getNumber('latitude');
            const lon = options.getNumber('longitude');
            const res = await getSatelliteRadiation(lat, lon);
            return await interaction.editReply(res.error ? res.content : { embeds: [res.embed] });
        }



        if (commandName === 'donate') {
            const donate_btn = new ButtonBuilder().setLabel('·ª¶ng h·ªô qua Patreon').setStyle(ButtonStyle.Link).setURL('https://www.patreon.com/randomperson255').setEmoji('üíñ');
            const buymeacoffee_btn = new ButtonBuilder().setLabel('M·ªùi m√¨nh m·ªôt ly c√† ph√™').setStyle(ButtonStyle.Link).setURL('https://www.buymeacoffee.com/random.person.255').setEmoji('‚òï');

            const donateEmbed = new EmbedBuilder().setColor(0xffcc70).setTitle(`‚òï ·ª¶ng h·ªô ${client.user.username}#6014`).setDescription('·ª¶ng h·ªô ƒë·ªÉ duy tr√¨ v√† ph√°t tri·ªÉn üíñ')
                .addFields(
                    { name: 'Patreon', value: '[·ª¶ng h·ªô Patreon](https://www.patreon.com/randomperson255)', inline: true },
                    { name: 'BuyMeACoffee', value: '[‚òï BuyMeACoffee](https://www.buymeacoffee.com/random.person.255)', inline: true }
                )
                .setFooter({ text: 'C·∫£m ∆°n b·∫°n ƒë√£ ·ªßng h·ªô!\nDev by <@1372581695328620594> (@therealnhan)' }).setTimestamp();

            const row = new ActionRowBuilder().addComponents(donate_btn, buymeacoffee_btn);
            await interaction.editReply({ embeds: [donateEmbed], components: [row] });

            setTimeout(async () => {
                try {
                    const disabledRow = new ActionRowBuilder().addComponents(
                        ButtonBuilder.from(donate_btn).setDisabled(true),
                        ButtonBuilder.from(buymeacoffee_btn).setDisabled(true)
                    );
                    await interaction.editReply({ components: [disabledRow] });
                } catch { }
            }, 60000);
        }

        if (commandName === 'elevation') {
            const lat = options.getNumber('latitude');
            const lon = options.getNumber('longitude');
            const res = await getElevation(lat, lon);
            return await interaction.editReply(res.content);
        }

        if (commandName === 'flood') {
            const lat = options.getNumber('latitude');
            const lon = options.getNumber('longitude');
            const res = await getFloodRisk(lat, lon);
            return await interaction.editReply(res.error ? res.content : { embeds: [res.embed] });
        }

        if (commandName === 'air_pollution') {
            const lat = options.getNumber('latitude');
            const lon = options.getNumber('longitude');
            const result = await getAirPollutionData(lat, lon);
            return await interaction.editReply(result.error ? result.content : { embeds: [result.embed] });
        }

        if (commandName === 'geo') {
            const sub = options.getSubcommand();
            if (sub === "location_to_coords") {
                const query = options.getString("location");
                const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;
                const res = await fetch(url, { headers: { "User-Agent": "WeatherBot/1.0" }, timeout: 10000 });
                const data = await res.json();
                if (!data.length) return await interaction.editReply("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm.");
                const place = data[0];
                return await interaction.editReply(`üìç **${place.display_name}**\nüåê Lat: \`${place.lat}\`\nüåê Lon: \`${place.lon}\``);
            } else if (sub === "coords_to_location") {
                const lat = options.getNumber("lat");
                const lon = options.getNumber("lon");
                const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`;
                const res = await fetch(url, { headers: { "User-Agent": "WeatherBot/1.0" }, timeout: 10000 });
                const data = await res.json();
                if (!data.display_name) return await interaction.editReply("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm.");
                return await interaction.editReply(`üìç T·ªça ƒë·ªô: \`${lat}, ${lon}\`\nüó∫Ô∏è ƒê·ªãa ƒëi·ªÉm: **${data.display_name}**`);
            }
        }

    } catch (err) {
        console.error("L·ªói x·ª≠ l√Ω interaction:", err);
        if (interaction.deferred && !interaction.replied) {
            return await interaction.editReply("‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh.");
        }
    }
});

client.login(TOKEN);

module.exports = {
    client, OWM_API_KEY, CLIENT_ID, TOKEN, fetch, apiKeys
};
